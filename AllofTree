#include<stdio.h>
#include<stdlib.h>

#define INIT_SIZE  10
#define INCREMENT_SIZE  10
#define OVERFLOW -2
#define ERROR 0

typedef int ElemType;

typedef struct TNode  //树节点
{
    ElemType data;
    struct TNode *lchild;
    struct TNode *rchild;
}TNode,*LinkTree;

typedef struct Stack   //顺序存储结构栈
{
    LinkTree *top;
    LinkTree *base;
    int StackSize;
}Stack;

typedef struct QNode
{
    LinkTree data;
    struct QNode *next;
}QNode, *QueuePtr;


typedef struct
{
    QueuePtr front;    //队头指针
    QueuePtr rear;    //队尾指针
}LinkQueue;

int InitQueue(LinkQueue *Q)
{
    Q->front = Q->rear = (QueuePtr) malloc(sizeof(QNode));
    if (!Q->front)
    {
        exit(OVERFLOW);
    }
    Q->front->next = NULL;
    return 1;
}

int queueEmpty(LinkQueue Q)     //判断队列是否为空
{
    if(Q.front->next == NULL)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int EnQueue(LinkQueue *Q, LinkTree e)
{
    QueuePtr p = (QueuePtr) malloc(sizeof(QNode));
    if (!p)
    {
        exit(OVERFLOW);
    }
    p->data = e;
    p->next = NULL;
    Q->rear->next = p;
    Q->rear = p;
    return 1;
}


int DeQueue(LinkQueue *Q, LinkTree *e)
{
    QueuePtr p;
    if (Q->front == Q->rear)
    {
        return ERROR;
    }
    p = Q->front->next;
    *e = p->data;
    Q->front->next = p->next;
    if (Q->rear == p)
    {
        Q->rear = Q->front;
    }
    free(p);
    return 1;
}


int InitStack(Stack *S)   //初始化顺序栈
{
    S->base  = (LinkTree *)malloc(sizeof(LinkTree)*INIT_SIZE);
    if(!S->base)
    {
        exit(OVERFLOW);
    }
    S->top = S->base;
    S->StackSize = INIT_SIZE;
}

int push(Stack *S,LinkTree e)     //入栈
{
    if((S->top-S->base)>=S->StackSize)
    {
        S->base = (LinkTree*)realloc(S->base ,(S->StackSize+INCREMENT_SIZE)*sizeof(LinkTree));
        if(!S->base)
        {
            exit(OVERFLOW);
        }
        S->StackSize = S->StackSize + INCREMENT_SIZE;
    }
    *(S->top++) = e;
}

int  pop(Stack *S,LinkTree *e)    //出栈
{
    if(S->top == S->base)
    {
        return -1;
    }
    *e = *(--S->top);
}

int GetTop(Stack S,LinkTree *e)    //获取栈顶元素
{
    if(S.top == S.base)
    {
        return -1;
    }
    *e = *(--S.top);
}
int isEmpty(Stack S)               //判断栈是否为空
{
    if(S.top == S.base)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int CreateTree(LinkTree *T)         //用先序遍历方法创建二叉树
{
    ElemType e;
    scanf("%d",&e);
    if(e == 0)
    {
        *T = NULL;
    }
    else
    {
        *T = (LinkTree) malloc(sizeof(TNode));
        if(!T)
        {
            exit(OVERFLOW);
        }
        (*T)->data = e;
        CreateTree(&(*T)->lchild);
        CreateTree(&(*T)->rchild);
    }
}

void printfTree(LinkTree T,int layer)      //将二叉树用树状结构打印出来
{
    int i;
    if(T)
    {
    printfTree(T->rchild,layer+1);        //逆中序打印；
    for(i=0;i<layer;i++){
        printf("   ");
    }
    printf("%d\n",T->data);
    printfTree(T->lchild,layer+1);
    }
}

void  leafNode(LinkTree T)    //打印叶节点，采用非递归先序遍历法
{
    Stack S;
    InitStack(&S);
    LinkTree p=T;
    while(p||!isEmpty(S))
    {
        if(p)
        {
            push(&S,p);
            if(p->lchild == NULL && p->rchild ==NULL)
            {
                printf("%d ",p->data);
            }
            p = p->lchild;
        }
        else
        {
            pop(&S,&p);
            p = p->rchild;
        }
    }
}

void leafNode2(LinkTree T)    //打印叶节点，采用递归先序遍历法
{
    if(T)
    {
        if(T->lchild == NULL &&T->rchild ==NULL)
        {
            printf("%d ",T->data);
        }
        leafNode(T->lchild);
        leafNode(T->rchild);
    }
}

int preOrder(LinkTree T)
{
    LinkTree p = T;
    Stack S;
    InitStack(&S);
    while(p||!isEmpty(S))
    {
        if(p)
        {
            printf("%d ",p->data);
            push(&S,p);
            p = p->lchild;
        }
        else
        {
            pop(&S,&p);
            p = p->rchild;
        }
    }
}

int inOrder(LinkTree T)      //中序遍历和先序遍历区别仅在于printf的位置不同，先序是在压栈的同时printf，而中序是在压栈完全结束，出栈时printf
{
    LinkTree p = T;
    Stack S;
    InitStack(&S);
    while(p||!isEmpty(S))
    {
        if(p)
        {
            push(&S,p);
            p = p->lchild;
        }
        else
        {
            pop(&S,&p);
            printf("%d ",p->data);
            p = p->rchild;
        }
    }
}

int postOrder(LinkTree T)     //后续遍历在压栈结束后，需要判断栈顶节点是否还有有节点，在没有右节点或者右节点已经被打印过的情况下才可以打印该节点
{
    LinkTree p = T;
    LinkTree e;
    LinkTree pre = NULL;
    Stack S;
    InitStack(&S);
    while(p||!isEmpty(S))
    {
        while(p)
        {
            push(&S,p);
            p = p->lchild;
        }
        GetTop(S,&p);
        if(p->rchild ==NULL||p->rchild ==pre)   //保证根节点晚于右子节点打印
        {
            printf("%d ",p->data);
            pre = p;
            pop(&S,&e);
            p = NULL;
        }
        else
        {
            p = p->rchild;
        }
    }
}

int layerOrder(LinkTree T)    //层序遍历，用到了队列的先进先出，对每一个数节点入队、出队
{
    LinkTree p=T;
    LinkQueue Q;
    InitQueue(&Q);
    EnQueue(&Q,p);


    while(!queueEmpty(Q))
    {
        DeQueue(&Q,&p);
        printf("%d ",p->data);
        if(p->lchild!=NULL)
        {
            EnQueue(&Q,p->lchild);
        }
        if(p->rchild!=NULL)
        {
            EnQueue(&Q,p->rchild);
        }
    }
}

int GetDepth(LinkTree T)
{
    int i,j,k;
    if(T)
    {
        i = GetDepth(T->lchild);
        j = GetDepth(T->rchild);
        k = i>j?i:j;
        return k+1;
    }
    else
    {
        return 0;
    }

}

void  MirrorRecursively(LinkTree T)
{
    LinkTree temp;
    if( (T== NULL)|| (T->lchild == NULL)&& (T->rchild == NULL))
    {
        return ;
    }
    else
    {
        temp = T->lchild;
        T->lchild = T->rchild;
        T->rchild = temp;
    }
    if(T->lchild)
    {
        MirrorRecursively(T->lchild);
    }
    if(T->rchild)
    {
        MirrorRecursively(T->rchild);
    }
}

int main()
{
    LinkTree T;
    printf("INPUT:\n");
    CreateTree(&T);
    printf("pre:\n");
    preOrder(T);
    printf("\n in:\n");
    inOrder(T);
    printf("\n post:\n");
    postOrder(T);
    printf("\n layer:\n");
    layerOrder(T);
    printf("\n");
    printf("The depth of the tree is %d \n",GetDepth(T));
    printfTree(T,0);
    printf("\n The leafnode of the tree is:\n");
    leafNode(T);
    printf("\n");
    leafNode2(T);
    MirrorRecursively(T);
    printfTree(T,0);
}

